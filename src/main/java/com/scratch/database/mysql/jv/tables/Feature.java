/*
 * This file is generated by jOOQ.
 */
package com.scratch.database.mysql.jv.tables;


import com.scratch.database.mysql.jv.Indexes;
import com.scratch.database.mysql.jv.JvB2cDev;
import com.scratch.database.mysql.jv.Keys;
import com.scratch.database.mysql.jv.enums.FeatureType;
import com.scratch.database.mysql.jv.tables.records.FeatureRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Feature extends TableImpl<FeatureRecord> {

    private static final long serialVersionUID = 1966562710;

    /**
     * The reference instance of <code>jv_b2c_dev.feature</code>
     */
    public static final Feature FEATURE = new Feature();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FeatureRecord> getRecordType() {
        return FeatureRecord.class;
    }

    /**
     * The column <code>jv_b2c_dev.feature.id</code>.
     */
    public final TableField<FeatureRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>jv_b2c_dev.feature.type</code>.
     */
    public final TableField<FeatureRecord, FeatureType> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(9).asEnumDataType(com.scratch.database.mysql.jv.enums.FeatureType.class), this, "");

    /**
     * The column <code>jv_b2c_dev.feature.featured_id</code>.
     */
    public final TableField<FeatureRecord, String> FEATURED_ID = createField("featured_id", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>jv_b2c_dev.feature.title</code>.
     */
    public final TableField<FeatureRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>jv_b2c_dev.feature.description</code>.
     */
    public final TableField<FeatureRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>jv_b2c_dev.feature.image_filename</code>.
     */
    public final TableField<FeatureRecord, String> IMAGE_FILENAME = createField("image_filename", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>jv_b2c_dev.feature.sequence</code>.
     */
    public final TableField<FeatureRecord, Integer> SEQUENCE = createField("sequence", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>jv_b2c_dev.feature.start_date</code>.
     */
    public final TableField<FeatureRecord, Timestamp> START_DATE = createField("start_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>jv_b2c_dev.feature.end_date</code>.
     */
    public final TableField<FeatureRecord, Timestamp> END_DATE = createField("end_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>jv_b2c_dev.feature.is_carousel</code>.
     */
    public final TableField<FeatureRecord, Byte> IS_CAROUSEL = createField("is_carousel", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>jv_b2c_dev.feature.is_active</code>.
     */
    public final TableField<FeatureRecord, Byte> IS_ACTIVE = createField("is_active", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>jv_b2c_dev.feature.is_deleted</code>.
     */
    public final TableField<FeatureRecord, Byte> IS_DELETED = createField("is_deleted", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>jv_b2c_dev.feature.created_ts</code>.
     */
    public final TableField<FeatureRecord, Timestamp> CREATED_TS = createField("created_ts", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>jv_b2c_dev.feature.updated_ts</code>.
     */
    public final TableField<FeatureRecord, Timestamp> UPDATED_TS = createField("updated_ts", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>jv_b2c_dev.feature</code> table reference
     */
    public Feature() {
        this(DSL.name("feature"), null);
    }

    /**
     * Create an aliased <code>jv_b2c_dev.feature</code> table reference
     */
    public Feature(String alias) {
        this(DSL.name(alias), FEATURE);
    }

    /**
     * Create an aliased <code>jv_b2c_dev.feature</code> table reference
     */
    public Feature(Name alias) {
        this(alias, FEATURE);
    }

    private Feature(Name alias, Table<FeatureRecord> aliased) {
        this(alias, aliased, null);
    }

    private Feature(Name alias, Table<FeatureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Feature(Table<O> child, ForeignKey<O, FeatureRecord> key) {
        super(child, key, FEATURE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JvB2cDev.JV_B2C_DEV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FEATURE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FeatureRecord, ULong> getIdentity() {
        return Keys.IDENTITY_FEATURE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FeatureRecord> getPrimaryKey() {
        return Keys.KEY_FEATURE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FeatureRecord>> getKeys() {
        return Arrays.<UniqueKey<FeatureRecord>>asList(Keys.KEY_FEATURE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Feature as(String alias) {
        return new Feature(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Feature as(Name alias) {
        return new Feature(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Feature rename(String name) {
        return new Feature(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Feature rename(Name name) {
        return new Feature(name, null);
    }
}
