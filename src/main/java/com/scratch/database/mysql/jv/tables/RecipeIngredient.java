/*
 * This file is generated by jOOQ.
 */
package com.scratch.database.mysql.jv.tables;


import com.scratch.database.mysql.jv.Indexes;
import com.scratch.database.mysql.jv.JvB2cDev;
import com.scratch.database.mysql.jv.Keys;
import com.scratch.database.mysql.jv.enums.RecipeIngredientType;
import com.scratch.database.mysql.jv.tables.records.RecipeIngredientRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RecipeIngredient extends TableImpl<RecipeIngredientRecord> {

    private static final long serialVersionUID = 1589432299;

    /**
     * The reference instance of <code>jv_b2c_dev.recipe_ingredient</code>
     */
    public static final RecipeIngredient RECIPE_INGREDIENT = new RecipeIngredient();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecipeIngredientRecord> getRecordType() {
        return RecipeIngredientRecord.class;
    }

    /**
     * The column <code>jv_b2c_dev.recipe_ingredient.id</code>.
     */
    public final TableField<RecipeIngredientRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>jv_b2c_dev.recipe_ingredient.type</code>.
     */
    public final TableField<RecipeIngredientRecord, RecipeIngredientType> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(10).asEnumDataType(com.scratch.database.mysql.jv.enums.RecipeIngredientType.class), this, "");

    /**
     * The column <code>jv_b2c_dev.recipe_ingredient.related_id</code>.
     */
    public final TableField<RecipeIngredientRecord, String> RELATED_ID = createField("related_id", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>jv_b2c_dev.recipe_ingredient.recipe_ingredient_group_id</code>.
     */
    public final TableField<RecipeIngredientRecord, ULong> RECIPE_INGREDIENT_GROUP_ID = createField("recipe_ingredient_group_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>jv_b2c_dev.recipe_ingredient.amount</code>.
     */
    public final TableField<RecipeIngredientRecord, String> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>jv_b2c_dev.recipe_ingredient.uom</code>.
     */
    public final TableField<RecipeIngredientRecord, String> UOM = createField("uom", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>jv_b2c_dev.recipe_ingredient.description</code>.
     */
    public final TableField<RecipeIngredientRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>jv_b2c_dev.recipe_ingredient.updated_ts</code>.
     */
    public final TableField<RecipeIngredientRecord, Timestamp> UPDATED_TS = createField("updated_ts", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>jv_b2c_dev.recipe_ingredient.created_ts</code>.
     */
    public final TableField<RecipeIngredientRecord, Timestamp> CREATED_TS = createField("created_ts", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>jv_b2c_dev.recipe_ingredient</code> table reference
     */
    public RecipeIngredient() {
        this(DSL.name("recipe_ingredient"), null);
    }

    /**
     * Create an aliased <code>jv_b2c_dev.recipe_ingredient</code> table reference
     */
    public RecipeIngredient(String alias) {
        this(DSL.name(alias), RECIPE_INGREDIENT);
    }

    /**
     * Create an aliased <code>jv_b2c_dev.recipe_ingredient</code> table reference
     */
    public RecipeIngredient(Name alias) {
        this(alias, RECIPE_INGREDIENT);
    }

    private RecipeIngredient(Name alias, Table<RecipeIngredientRecord> aliased) {
        this(alias, aliased, null);
    }

    private RecipeIngredient(Name alias, Table<RecipeIngredientRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> RecipeIngredient(Table<O> child, ForeignKey<O, RecipeIngredientRecord> key) {
        super(child, key, RECIPE_INGREDIENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JvB2cDev.JV_B2C_DEV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RECIPE_INGREDIENT_PRIMARY, Indexes.RECIPE_INGREDIENT_RECIPE_INGREDIENT_IBFK_2, Indexes.RECIPE_INGREDIENT_UOM);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RecipeIngredientRecord, ULong> getIdentity() {
        return Keys.IDENTITY_RECIPE_INGREDIENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RecipeIngredientRecord> getPrimaryKey() {
        return Keys.KEY_RECIPE_INGREDIENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RecipeIngredientRecord>> getKeys() {
        return Arrays.<UniqueKey<RecipeIngredientRecord>>asList(Keys.KEY_RECIPE_INGREDIENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<RecipeIngredientRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RecipeIngredientRecord, ?>>asList(Keys.RECIPE_INGREDIENT_IBFK_2, Keys.RECIPE_INGREDIENT_IBFK_3);
    }

    public RecipeIngredientGroup recipeIngredientGroup() {
        return new RecipeIngredientGroup(this, Keys.RECIPE_INGREDIENT_IBFK_2);
    }

    public Uom uom() {
        return new Uom(this, Keys.RECIPE_INGREDIENT_IBFK_3);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RecipeIngredient as(String alias) {
        return new RecipeIngredient(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RecipeIngredient as(Name alias) {
        return new RecipeIngredient(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RecipeIngredient rename(String name) {
        return new RecipeIngredient(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RecipeIngredient rename(Name name) {
        return new RecipeIngredient(name, null);
    }
}
