/*
 * This file is generated by jOOQ.
 */
package com.scratch.database.mysql.jv.tables;


import com.scratch.database.mysql.jv.Indexes;
import com.scratch.database.mysql.jv.JvB2cDev;
import com.scratch.database.mysql.jv.Keys;
import com.scratch.database.mysql.jv.enums.TagRelationType;
import com.scratch.database.mysql.jv.tables.records.TagRelationRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TagRelation extends TableImpl<TagRelationRecord> {

    private static final long serialVersionUID = 471611256;

    /**
     * The reference instance of <code>jv_b2c_dev.tag_relation</code>
     */
    public static final TagRelation TAG_RELATION = new TagRelation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TagRelationRecord> getRecordType() {
        return TagRelationRecord.class;
    }

    /**
     * The column <code>jv_b2c_dev.tag_relation.id</code>.
     */
    public final TableField<TagRelationRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>jv_b2c_dev.tag_relation.type</code>.
     */
    public final TableField<TagRelationRecord, TagRelationType> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(17).asEnumDataType(com.scratch.database.mysql.jv.enums.TagRelationType.class), this, "");

    /**
     * The column <code>jv_b2c_dev.tag_relation.tag_id</code>.
     */
    public final TableField<TagRelationRecord, ULong> TAG_ID = createField("tag_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>jv_b2c_dev.tag_relation.related_id</code>.
     */
    public final TableField<TagRelationRecord, String> RELATED_ID = createField("related_id", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>jv_b2c_dev.tag_relation.created_ts</code>.
     */
    public final TableField<TagRelationRecord, Timestamp> CREATED_TS = createField("created_ts", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>jv_b2c_dev.tag_relation</code> table reference
     */
    public TagRelation() {
        this(DSL.name("tag_relation"), null);
    }

    /**
     * Create an aliased <code>jv_b2c_dev.tag_relation</code> table reference
     */
    public TagRelation(String alias) {
        this(DSL.name(alias), TAG_RELATION);
    }

    /**
     * Create an aliased <code>jv_b2c_dev.tag_relation</code> table reference
     */
    public TagRelation(Name alias) {
        this(alias, TAG_RELATION);
    }

    private TagRelation(Name alias, Table<TagRelationRecord> aliased) {
        this(alias, aliased, null);
    }

    private TagRelation(Name alias, Table<TagRelationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TagRelation(Table<O> child, ForeignKey<O, TagRelationRecord> key) {
        super(child, key, TAG_RELATION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JvB2cDev.JV_B2C_DEV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TAG_RELATION_PRIMARY, Indexes.TAG_RELATION_TAG_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TagRelationRecord, ULong> getIdentity() {
        return Keys.IDENTITY_TAG_RELATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TagRelationRecord> getPrimaryKey() {
        return Keys.KEY_TAG_RELATION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TagRelationRecord>> getKeys() {
        return Arrays.<UniqueKey<TagRelationRecord>>asList(Keys.KEY_TAG_RELATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TagRelationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TagRelationRecord, ?>>asList(Keys.TAG_RELATION_IBFK_1);
    }

    public Tag tag() {
        return new Tag(this, Keys.TAG_RELATION_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TagRelation as(String alias) {
        return new TagRelation(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TagRelation as(Name alias) {
        return new TagRelation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TagRelation rename(String name) {
        return new TagRelation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TagRelation rename(Name name) {
        return new TagRelation(name, null);
    }
}
