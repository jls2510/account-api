/*
 * This file is generated by jOOQ.
 */
package com.scratch.database.mysql.jv.tables.daos;


import com.scratch.database.mysql.jv.enums.ImageType;
import com.scratch.database.mysql.jv.tables.Image;
import com.scratch.database.mysql.jv.tables.records.ImageRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ImageDao extends DAOImpl<ImageRecord, com.scratch.database.mysql.jv.tables.pojos.Image, ULong> {

    /**
     * Create a new ImageDao without any configuration
     */
    public ImageDao() {
        super(Image.IMAGE, com.scratch.database.mysql.jv.tables.pojos.Image.class);
    }

    /**
     * Create a new ImageDao with an attached configuration
     */
    public ImageDao(Configuration configuration) {
        super(Image.IMAGE, com.scratch.database.mysql.jv.tables.pojos.Image.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected ULong getId(com.scratch.database.mysql.jv.tables.pojos.Image object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.scratch.database.mysql.jv.tables.pojos.Image> fetchById(ULong... values) {
        return fetch(Image.IMAGE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.scratch.database.mysql.jv.tables.pojos.Image fetchOneById(ULong value) {
        return fetchOne(Image.IMAGE.ID, value);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<com.scratch.database.mysql.jv.tables.pojos.Image> fetchByType(ImageType... values) {
        return fetch(Image.IMAGE.TYPE, values);
    }

    /**
     * Fetch records that have <code>related_id IN (values)</code>
     */
    public List<com.scratch.database.mysql.jv.tables.pojos.Image> fetchByRelatedId(String... values) {
        return fetch(Image.IMAGE.RELATED_ID, values);
    }

    /**
     * Fetch records that have <code>filename IN (values)</code>
     */
    public List<com.scratch.database.mysql.jv.tables.pojos.Image> fetchByFilename(String... values) {
        return fetch(Image.IMAGE.FILENAME, values);
    }

    /**
     * Fetch a unique record that has <code>filename = value</code>
     */
    public com.scratch.database.mysql.jv.tables.pojos.Image fetchOneByFilename(String value) {
        return fetchOne(Image.IMAGE.FILENAME, value);
    }

    /**
     * Fetch records that have <code>is_primary IN (values)</code>
     */
    public List<com.scratch.database.mysql.jv.tables.pojos.Image> fetchByIsPrimary(Byte... values) {
        return fetch(Image.IMAGE.IS_PRIMARY, values);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<com.scratch.database.mysql.jv.tables.pojos.Image> fetchByTitle(String... values) {
        return fetch(Image.IMAGE.TITLE, values);
    }

    /**
     * Fetch records that have <code>alt IN (values)</code>
     */
    public List<com.scratch.database.mysql.jv.tables.pojos.Image> fetchByAlt(String... values) {
        return fetch(Image.IMAGE.ALT, values);
    }

    /**
     * Fetch records that have <code>sequence_number IN (values)</code>
     */
    public List<com.scratch.database.mysql.jv.tables.pojos.Image> fetchBySequenceNumber(Integer... values) {
        return fetch(Image.IMAGE.SEQUENCE_NUMBER, values);
    }

    /**
     * Fetch records that have <code>is_video IN (values)</code>
     */
    public List<com.scratch.database.mysql.jv.tables.pojos.Image> fetchByIsVideo(Byte... values) {
        return fetch(Image.IMAGE.IS_VIDEO, values);
    }

    /**
     * Fetch records that have <code>updated_ts IN (values)</code>
     */
    public List<com.scratch.database.mysql.jv.tables.pojos.Image> fetchByUpdatedTs(Timestamp... values) {
        return fetch(Image.IMAGE.UPDATED_TS, values);
    }

    /**
     * Fetch records that have <code>created_ts IN (values)</code>
     */
    public List<com.scratch.database.mysql.jv.tables.pojos.Image> fetchByCreatedTs(Timestamp... values) {
        return fetch(Image.IMAGE.CREATED_TS, values);
    }
}
