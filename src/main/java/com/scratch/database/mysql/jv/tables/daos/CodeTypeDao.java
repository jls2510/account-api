/*
 * This file is generated by jOOQ.
 */
package com.scratch.database.mysql.jv.tables.daos;


import com.scratch.database.mysql.jv.tables.CodeType;
import com.scratch.database.mysql.jv.tables.records.CodeTypeRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CodeTypeDao extends DAOImpl<CodeTypeRecord, com.scratch.database.mysql.jv.tables.pojos.CodeType, Long> {

    /**
     * Create a new CodeTypeDao without any configuration
     */
    public CodeTypeDao() {
        super(CodeType.CODE_TYPE, com.scratch.database.mysql.jv.tables.pojos.CodeType.class);
    }

    /**
     * Create a new CodeTypeDao with an attached configuration
     */
    public CodeTypeDao(Configuration configuration) {
        super(CodeType.CODE_TYPE, com.scratch.database.mysql.jv.tables.pojos.CodeType.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(com.scratch.database.mysql.jv.tables.pojos.CodeType object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.scratch.database.mysql.jv.tables.pojos.CodeType> fetchById(Long... values) {
        return fetch(CodeType.CODE_TYPE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.scratch.database.mysql.jv.tables.pojos.CodeType fetchOneById(Long value) {
        return fetchOne(CodeType.CODE_TYPE.ID, value);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<com.scratch.database.mysql.jv.tables.pojos.CodeType> fetchByType(String... values) {
        return fetch(CodeType.CODE_TYPE.TYPE, values);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<com.scratch.database.mysql.jv.tables.pojos.CodeType> fetchByDescription(String... values) {
        return fetch(CodeType.CODE_TYPE.DESCRIPTION, values);
    }
}
