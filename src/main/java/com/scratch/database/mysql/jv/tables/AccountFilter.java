/*
 * This file is generated by jOOQ.
 */
package com.scratch.database.mysql.jv.tables;


import com.scratch.database.mysql.jv.Indexes;
import com.scratch.database.mysql.jv.JvB2cDev;
import com.scratch.database.mysql.jv.Keys;
import com.scratch.database.mysql.jv.tables.records.AccountFilterRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountFilter extends TableImpl<AccountFilterRecord> {

    private static final long serialVersionUID = 657630337;

    /**
     * The reference instance of <code>jv_b2c_dev.account_filter</code>
     */
    public static final AccountFilter ACCOUNT_FILTER = new AccountFilter();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountFilterRecord> getRecordType() {
        return AccountFilterRecord.class;
    }

    /**
     * The column <code>jv_b2c_dev.account_filter.id</code>.
     */
    public final TableField<AccountFilterRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>jv_b2c_dev.account_filter.account_id</code>.
     */
    public final TableField<AccountFilterRecord, ULong> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>jv_b2c_dev.account_filter.tag_id</code>.
     */
    public final TableField<AccountFilterRecord, ULong> TAG_ID = createField("tag_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * Create a <code>jv_b2c_dev.account_filter</code> table reference
     */
    public AccountFilter() {
        this(DSL.name("account_filter"), null);
    }

    /**
     * Create an aliased <code>jv_b2c_dev.account_filter</code> table reference
     */
    public AccountFilter(String alias) {
        this(DSL.name(alias), ACCOUNT_FILTER);
    }

    /**
     * Create an aliased <code>jv_b2c_dev.account_filter</code> table reference
     */
    public AccountFilter(Name alias) {
        this(alias, ACCOUNT_FILTER);
    }

    private AccountFilter(Name alias, Table<AccountFilterRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountFilter(Name alias, Table<AccountFilterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AccountFilter(Table<O> child, ForeignKey<O, AccountFilterRecord> key) {
        super(child, key, ACCOUNT_FILTER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JvB2cDev.JV_B2C_DEV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACCOUNT_FILTER_ACCOUNT_FILTER_ACCOUNT_ID_FK, Indexes.ACCOUNT_FILTER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AccountFilterRecord, ULong> getIdentity() {
        return Keys.IDENTITY_ACCOUNT_FILTER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AccountFilterRecord> getPrimaryKey() {
        return Keys.KEY_ACCOUNT_FILTER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AccountFilterRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountFilterRecord>>asList(Keys.KEY_ACCOUNT_FILTER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AccountFilterRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccountFilterRecord, ?>>asList(Keys.ACCOUNT_FILTER_ACCOUNT_ID_FK);
    }

    public Account account() {
        return new Account(this, Keys.ACCOUNT_FILTER_ACCOUNT_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountFilter as(String alias) {
        return new AccountFilter(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountFilter as(Name alias) {
        return new AccountFilter(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountFilter rename(String name) {
        return new AccountFilter(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountFilter rename(Name name) {
        return new AccountFilter(name, null);
    }
}
