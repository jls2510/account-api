/*
 * This file is generated by jOOQ.
 */
package com.scratch.database.mysql.jv.tables;


import com.scratch.database.mysql.jv.Indexes;
import com.scratch.database.mysql.jv.JvB2cDev;
import com.scratch.database.mysql.jv.Keys;
import com.scratch.database.mysql.jv.enums.ImageType;
import com.scratch.database.mysql.jv.tables.records.ImageRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Image extends TableImpl<ImageRecord> {

    private static final long serialVersionUID = -248317137;

    /**
     * The reference instance of <code>jv_b2c_dev.image</code>
     */
    public static final Image IMAGE = new Image();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImageRecord> getRecordType() {
        return ImageRecord.class;
    }

    /**
     * The column <code>jv_b2c_dev.image.id</code>.
     */
    public final TableField<ImageRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>jv_b2c_dev.image.type</code>.
     */
    public final TableField<ImageRecord, ImageType> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(8).asEnumDataType(com.scratch.database.mysql.jv.enums.ImageType.class), this, "");

    /**
     * The column <code>jv_b2c_dev.image.related_id</code>.
     */
    public final TableField<ImageRecord, String> RELATED_ID = createField("related_id", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>jv_b2c_dev.image.filename</code>.
     */
    public final TableField<ImageRecord, String> FILENAME = createField("filename", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>jv_b2c_dev.image.is_primary</code>.
     */
    public final TableField<ImageRecord, Byte> IS_PRIMARY = createField("is_primary", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>jv_b2c_dev.image.title</code>.
     */
    public final TableField<ImageRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>jv_b2c_dev.image.alt</code>.
     */
    public final TableField<ImageRecord, String> ALT = createField("alt", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>jv_b2c_dev.image.sequence_number</code>.
     */
    public final TableField<ImageRecord, Integer> SEQUENCE_NUMBER = createField("sequence_number", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>jv_b2c_dev.image.is_video</code>.
     */
    public final TableField<ImageRecord, Byte> IS_VIDEO = createField("is_video", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>jv_b2c_dev.image.updated_ts</code>.
     */
    public final TableField<ImageRecord, Timestamp> UPDATED_TS = createField("updated_ts", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>jv_b2c_dev.image.created_ts</code>.
     */
    public final TableField<ImageRecord, Timestamp> CREATED_TS = createField("created_ts", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>jv_b2c_dev.image</code> table reference
     */
    public Image() {
        this(DSL.name("image"), null);
    }

    /**
     * Create an aliased <code>jv_b2c_dev.image</code> table reference
     */
    public Image(String alias) {
        this(DSL.name(alias), IMAGE);
    }

    /**
     * Create an aliased <code>jv_b2c_dev.image</code> table reference
     */
    public Image(Name alias) {
        this(alias, IMAGE);
    }

    private Image(Name alias, Table<ImageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Image(Name alias, Table<ImageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Image(Table<O> child, ForeignKey<O, ImageRecord> key) {
        super(child, key, IMAGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JvB2cDev.JV_B2C_DEV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IMAGE_PRIMARY, Indexes.IMAGE_URL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ImageRecord, ULong> getIdentity() {
        return Keys.IDENTITY_IMAGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ImageRecord> getPrimaryKey() {
        return Keys.KEY_IMAGE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ImageRecord>> getKeys() {
        return Arrays.<UniqueKey<ImageRecord>>asList(Keys.KEY_IMAGE_PRIMARY, Keys.KEY_IMAGE_URL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Image as(String alias) {
        return new Image(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Image as(Name alias) {
        return new Image(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Image rename(String name) {
        return new Image(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Image rename(Name name) {
        return new Image(name, null);
    }
}
