/*
 * This file is generated by jOOQ.
 */
package com.scratch.database.mysql.jv.tables;


import com.scratch.database.mysql.jv.Indexes;
import com.scratch.database.mysql.jv.JvB2cDev;
import com.scratch.database.mysql.jv.Keys;
import com.scratch.database.mysql.jv.tables.records.SessionRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Session extends TableImpl<SessionRecord> {

    private static final long serialVersionUID = -1041803993;

    /**
     * The reference instance of <code>jv_b2c_dev.session</code>
     */
    public static final Session SESSION = new Session();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SessionRecord> getRecordType() {
        return SessionRecord.class;
    }

    /**
     * The column <code>jv_b2c_dev.session.id</code>.
     */
    public final TableField<SessionRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.CHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>jv_b2c_dev.session.name</code>.
     */
    public final TableField<SessionRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>jv_b2c_dev.session.modified</code>.
     */
    public final TableField<SessionRecord, Integer> MODIFIED = createField("modified", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>jv_b2c_dev.session.lifetime</code>.
     */
    public final TableField<SessionRecord, Integer> LIFETIME = createField("lifetime", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>jv_b2c_dev.session.data</code>.
     */
    public final TableField<SessionRecord, String> DATA = createField("data", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>jv_b2c_dev.session</code> table reference
     */
    public Session() {
        this(DSL.name("session"), null);
    }

    /**
     * Create an aliased <code>jv_b2c_dev.session</code> table reference
     */
    public Session(String alias) {
        this(DSL.name(alias), SESSION);
    }

    /**
     * Create an aliased <code>jv_b2c_dev.session</code> table reference
     */
    public Session(Name alias) {
        this(alias, SESSION);
    }

    private Session(Name alias, Table<SessionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Session(Name alias, Table<SessionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Session(Table<O> child, ForeignKey<O, SessionRecord> key) {
        super(child, key, SESSION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JvB2cDev.JV_B2C_DEV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SESSION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SessionRecord> getPrimaryKey() {
        return Keys.KEY_SESSION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SessionRecord>> getKeys() {
        return Arrays.<UniqueKey<SessionRecord>>asList(Keys.KEY_SESSION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Session as(String alias) {
        return new Session(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Session as(Name alias) {
        return new Session(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Session rename(String name) {
        return new Session(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Session rename(Name name) {
        return new Session(name, null);
    }
}
