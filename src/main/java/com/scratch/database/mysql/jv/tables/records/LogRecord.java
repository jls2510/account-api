/*
 * This file is generated by jOOQ.
 */
package com.scratch.database.mysql.jv.tables.records;


import com.scratch.database.mysql.jv.enums.LogLevel;
import com.scratch.database.mysql.jv.tables.Log;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LogRecord extends UpdatableRecordImpl<LogRecord> implements Record7<ULong, Timestamp, LogLevel, String, String, String, String> {

    private static final long serialVersionUID = -590315073;

    /**
     * Setter for <code>jv_b2c_dev.log.id</code>.
     */
    public LogRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>jv_b2c_dev.log.id</code>.
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>jv_b2c_dev.log.created_ts</code>.
     */
    public LogRecord setCreatedTs(Timestamp value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>jv_b2c_dev.log.created_ts</code>.
     */
    public Timestamp getCreatedTs() {
        return (Timestamp) get(1);
    }

    /**
     * Setter for <code>jv_b2c_dev.log.level</code>.
     */
    public LogRecord setLevel(LogLevel value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>jv_b2c_dev.log.level</code>.
     */
    public LogLevel getLevel() {
        return (LogLevel) get(2);
    }

    /**
     * Setter for <code>jv_b2c_dev.log.event</code>.
     */
    public LogRecord setEvent(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>jv_b2c_dev.log.event</code>.
     */
    public String getEvent() {
        return (String) get(3);
    }

    /**
     * Setter for <code>jv_b2c_dev.log.description</code>.
     */
    public LogRecord setDescription(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>jv_b2c_dev.log.description</code>.
     */
    public String getDescription() {
        return (String) get(4);
    }

    /**
     * Setter for <code>jv_b2c_dev.log.before</code>.
     */
    public LogRecord setBefore(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>jv_b2c_dev.log.before</code>.
     */
    public String getBefore() {
        return (String) get(5);
    }

    /**
     * Setter for <code>jv_b2c_dev.log.after</code>.
     */
    public LogRecord setAfter(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>jv_b2c_dev.log.after</code>.
     */
    public String getAfter() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<ULong, Timestamp, LogLevel, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<ULong, Timestamp, LogLevel, String, String, String, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<ULong> field1() {
        return Log.LOG.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field2() {
        return Log.LOG.CREATED_TS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LogLevel> field3() {
        return Log.LOG.LEVEL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Log.LOG.EVENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return Log.LOG.DESCRIPTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return Log.LOG.BEFORE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field7() {
        return Log.LOG.AFTER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ULong component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component2() {
        return getCreatedTs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogLevel component3() {
        return getLevel();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getEvent();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component5() {
        return getDescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component6() {
        return getBefore();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component7() {
        return getAfter();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ULong value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value2() {
        return getCreatedTs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogLevel value3() {
        return getLevel();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getEvent();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getDescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getBefore();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value7() {
        return getAfter();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogRecord value1(ULong value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogRecord value2(Timestamp value) {
        setCreatedTs(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogRecord value3(LogLevel value) {
        setLevel(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogRecord value4(String value) {
        setEvent(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogRecord value5(String value) {
        setDescription(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogRecord value6(String value) {
        setBefore(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogRecord value7(String value) {
        setAfter(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogRecord values(ULong value1, Timestamp value2, LogLevel value3, String value4, String value5, String value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LogRecord
     */
    public LogRecord() {
        super(Log.LOG);
    }

    /**
     * Create a detached, initialised LogRecord
     */
    public LogRecord(ULong id, Timestamp createdTs, LogLevel level, String event, String description, String before, String after) {
        super(Log.LOG);

        set(0, id);
        set(1, createdTs);
        set(2, level);
        set(3, event);
        set(4, description);
        set(5, before);
        set(6, after);
    }
}
