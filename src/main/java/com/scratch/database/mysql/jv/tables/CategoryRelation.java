/*
 * This file is generated by jOOQ.
 */
package com.scratch.database.mysql.jv.tables;


import com.scratch.database.mysql.jv.Indexes;
import com.scratch.database.mysql.jv.JvB2cDev;
import com.scratch.database.mysql.jv.Keys;
import com.scratch.database.mysql.jv.tables.records.CategoryRelationRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CategoryRelation extends TableImpl<CategoryRelationRecord> {

    private static final long serialVersionUID = -549627692;

    /**
     * The reference instance of <code>jv_b2c_dev.category_relation</code>
     */
    public static final CategoryRelation CATEGORY_RELATION = new CategoryRelation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CategoryRelationRecord> getRecordType() {
        return CategoryRelationRecord.class;
    }

    /**
     * The column <code>jv_b2c_dev.category_relation.id</code>.
     */
    public final TableField<CategoryRelationRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>jv_b2c_dev.category_relation.category_id</code>.
     */
    public final TableField<CategoryRelationRecord, ULong> CATEGORY_ID = createField("category_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>jv_b2c_dev.category_relation.parent_id</code>.
     */
    public final TableField<CategoryRelationRecord, ULong> PARENT_ID = createField("parent_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>jv_b2c_dev.category_relation.sequence</code>.
     */
    public final TableField<CategoryRelationRecord, Integer> SEQUENCE = createField("sequence", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>jv_b2c_dev.category_relation.updated_ts</code>.
     */
    public final TableField<CategoryRelationRecord, Timestamp> UPDATED_TS = createField("updated_ts", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>jv_b2c_dev.category_relation.created_ts</code>.
     */
    public final TableField<CategoryRelationRecord, Timestamp> CREATED_TS = createField("created_ts", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>jv_b2c_dev.category_relation</code> table reference
     */
    public CategoryRelation() {
        this(DSL.name("category_relation"), null);
    }

    /**
     * Create an aliased <code>jv_b2c_dev.category_relation</code> table reference
     */
    public CategoryRelation(String alias) {
        this(DSL.name(alias), CATEGORY_RELATION);
    }

    /**
     * Create an aliased <code>jv_b2c_dev.category_relation</code> table reference
     */
    public CategoryRelation(Name alias) {
        this(alias, CATEGORY_RELATION);
    }

    private CategoryRelation(Name alias, Table<CategoryRelationRecord> aliased) {
        this(alias, aliased, null);
    }

    private CategoryRelation(Name alias, Table<CategoryRelationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> CategoryRelation(Table<O> child, ForeignKey<O, CategoryRelationRecord> key) {
        super(child, key, CATEGORY_RELATION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JvB2cDev.JV_B2C_DEV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CATEGORY_RELATION_CATEGORY_RELATION_IBFK_1, Indexes.CATEGORY_RELATION_CATEGORY_RELATION_IBFK_2, Indexes.CATEGORY_RELATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CategoryRelationRecord, ULong> getIdentity() {
        return Keys.IDENTITY_CATEGORY_RELATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CategoryRelationRecord> getPrimaryKey() {
        return Keys.KEY_CATEGORY_RELATION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CategoryRelationRecord>> getKeys() {
        return Arrays.<UniqueKey<CategoryRelationRecord>>asList(Keys.KEY_CATEGORY_RELATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CategoryRelationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CategoryRelationRecord, ?>>asList(Keys.CATEGORY_RELATION_IBFK_1, Keys.CATEGORY_RELATION_IBFK_2);
    }

    public Category categoryRelationIbfk_1() {
        return new Category(this, Keys.CATEGORY_RELATION_IBFK_1);
    }

    public Category categoryRelationIbfk_2() {
        return new Category(this, Keys.CATEGORY_RELATION_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CategoryRelation as(String alias) {
        return new CategoryRelation(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CategoryRelation as(Name alias) {
        return new CategoryRelation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoryRelation rename(String name) {
        return new CategoryRelation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoryRelation rename(Name name) {
        return new CategoryRelation(name, null);
    }
}
