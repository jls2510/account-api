/*
 * This file is generated by jOOQ.
 */
package com.scratch.database.mysql.jv.tables;


import com.scratch.database.mysql.jv.Indexes;
import com.scratch.database.mysql.jv.JvB2cDev;
import com.scratch.database.mysql.jv.Keys;
import com.scratch.database.mysql.jv.tables.records.CodeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Code extends TableImpl<CodeRecord> {

    private static final long serialVersionUID = -171249561;

    /**
     * The reference instance of <code>jv_b2c_dev.code</code>
     */
    public static final Code CODE = new Code();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CodeRecord> getRecordType() {
        return CodeRecord.class;
    }

    /**
     * The column <code>jv_b2c_dev.code.id</code>.
     */
    public final TableField<CodeRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>jv_b2c_dev.code.type</code>.
     */
    public final TableField<CodeRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>jv_b2c_dev.code.key</code>.
     */
    public final TableField<CodeRecord, String> KEY = createField("key", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>jv_b2c_dev.code.val</code>.
     */
    public final TableField<CodeRecord, String> VAL = createField("val", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>jv_b2c_dev.code.description</code>.
     */
    public final TableField<CodeRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>jv_b2c_dev.code</code> table reference
     */
    public Code() {
        this(DSL.name("code"), null);
    }

    /**
     * Create an aliased <code>jv_b2c_dev.code</code> table reference
     */
    public Code(String alias) {
        this(DSL.name(alias), CODE);
    }

    /**
     * Create an aliased <code>jv_b2c_dev.code</code> table reference
     */
    public Code(Name alias) {
        this(alias, CODE);
    }

    private Code(Name alias, Table<CodeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Code(Name alias, Table<CodeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Code(Table<O> child, ForeignKey<O, CodeRecord> key) {
        super(child, key, CODE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JvB2cDev.JV_B2C_DEV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CODE_KEY, Indexes.CODE_PRIMARY, Indexes.CODE_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CodeRecord, Long> getIdentity() {
        return Keys.IDENTITY_CODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CodeRecord> getPrimaryKey() {
        return Keys.KEY_CODE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CodeRecord>> getKeys() {
        return Arrays.<UniqueKey<CodeRecord>>asList(Keys.KEY_CODE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Code as(String alias) {
        return new Code(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Code as(Name alias) {
        return new Code(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Code rename(String name) {
        return new Code(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Code rename(Name name) {
        return new Code(name, null);
    }
}
