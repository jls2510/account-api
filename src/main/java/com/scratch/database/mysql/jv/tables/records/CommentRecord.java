/*
 * This file is generated by jOOQ.
 */
package com.scratch.database.mysql.jv.tables.records;


import com.scratch.database.mysql.jv.enums.CommentStatus;
import com.scratch.database.mysql.jv.enums.CommentType;
import com.scratch.database.mysql.jv.tables.Comment;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record11;
import org.jooq.Row11;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommentRecord extends UpdatableRecordImpl<CommentRecord> implements Record11<ULong, CommentType, String, Long, String, String, CommentStatus, String, Byte, Timestamp, Timestamp> {

    private static final long serialVersionUID = -986705784;

    /**
     * Setter for <code>jv_b2c_dev.comment.id</code>.
     */
    public CommentRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>jv_b2c_dev.comment.id</code>.
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>jv_b2c_dev.comment.type</code>.
     */
    public CommentRecord setType(CommentType value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>jv_b2c_dev.comment.type</code>.
     */
    public CommentType getType() {
        return (CommentType) get(1);
    }

    /**
     * Setter for <code>jv_b2c_dev.comment.related_id</code>.
     */
    public CommentRecord setRelatedId(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>jv_b2c_dev.comment.related_id</code>.
     */
    public String getRelatedId() {
        return (String) get(2);
    }

    /**
     * Setter for <code>jv_b2c_dev.comment.account_id</code>.
     */
    public CommentRecord setAccountId(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>jv_b2c_dev.comment.account_id</code>.
     */
    public Long getAccountId() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>jv_b2c_dev.comment.name</code>.
     */
    public CommentRecord setName(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>jv_b2c_dev.comment.name</code>.
     */
    public String getName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>jv_b2c_dev.comment.comment</code>.
     */
    public CommentRecord setComment(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>jv_b2c_dev.comment.comment</code>.
     */
    public String getComment() {
        return (String) get(5);
    }

    /**
     * Setter for <code>jv_b2c_dev.comment.status</code>.
     */
    public CommentRecord setStatus(CommentStatus value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>jv_b2c_dev.comment.status</code>.
     */
    public CommentStatus getStatus() {
        return (CommentStatus) get(6);
    }

    /**
     * Setter for <code>jv_b2c_dev.comment.approval_user</code>.
     */
    public CommentRecord setApprovalUser(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>jv_b2c_dev.comment.approval_user</code>.
     */
    public String getApprovalUser() {
        return (String) get(7);
    }

    /**
     * Setter for <code>jv_b2c_dev.comment.is_deleted</code>.
     */
    public CommentRecord setIsDeleted(Byte value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>jv_b2c_dev.comment.is_deleted</code>.
     */
    public Byte getIsDeleted() {
        return (Byte) get(8);
    }

    /**
     * Setter for <code>jv_b2c_dev.comment.updated_ts</code>.
     */
    public CommentRecord setUpdatedTs(Timestamp value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>jv_b2c_dev.comment.updated_ts</code>.
     */
    public Timestamp getUpdatedTs() {
        return (Timestamp) get(9);
    }

    /**
     * Setter for <code>jv_b2c_dev.comment.created_ts</code>.
     */
    public CommentRecord setCreatedTs(Timestamp value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>jv_b2c_dev.comment.created_ts</code>.
     */
    public Timestamp getCreatedTs() {
        return (Timestamp) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row11<ULong, CommentType, String, Long, String, String, CommentStatus, String, Byte, Timestamp, Timestamp> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row11<ULong, CommentType, String, Long, String, String, CommentStatus, String, Byte, Timestamp, Timestamp> valuesRow() {
        return (Row11) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<ULong> field1() {
        return Comment.COMMENT.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<CommentType> field2() {
        return Comment.COMMENT.TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Comment.COMMENT.RELATED_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field4() {
        return Comment.COMMENT.ACCOUNT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return Comment.COMMENT.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return Comment.COMMENT.COMMENT_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<CommentStatus> field7() {
        return Comment.COMMENT.STATUS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field8() {
        return Comment.COMMENT.APPROVAL_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Byte> field9() {
        return Comment.COMMENT.IS_DELETED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field10() {
        return Comment.COMMENT.UPDATED_TS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field11() {
        return Comment.COMMENT.CREATED_TS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ULong component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommentType component2() {
        return getType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getRelatedId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component4() {
        return getAccountId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component5() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component6() {
        return getComment();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommentStatus component7() {
        return getStatus();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component8() {
        return getApprovalUser();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte component9() {
        return getIsDeleted();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component10() {
        return getUpdatedTs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component11() {
        return getCreatedTs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ULong value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommentType value2() {
        return getType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getRelatedId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value4() {
        return getAccountId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getComment();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommentStatus value7() {
        return getStatus();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value8() {
        return getApprovalUser();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte value9() {
        return getIsDeleted();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value10() {
        return getUpdatedTs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value11() {
        return getCreatedTs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommentRecord value1(ULong value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommentRecord value2(CommentType value) {
        setType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommentRecord value3(String value) {
        setRelatedId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommentRecord value4(Long value) {
        setAccountId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommentRecord value5(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommentRecord value6(String value) {
        setComment(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommentRecord value7(CommentStatus value) {
        setStatus(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommentRecord value8(String value) {
        setApprovalUser(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommentRecord value9(Byte value) {
        setIsDeleted(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommentRecord value10(Timestamp value) {
        setUpdatedTs(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommentRecord value11(Timestamp value) {
        setCreatedTs(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommentRecord values(ULong value1, CommentType value2, String value3, Long value4, String value5, String value6, CommentStatus value7, String value8, Byte value9, Timestamp value10, Timestamp value11) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CommentRecord
     */
    public CommentRecord() {
        super(Comment.COMMENT);
    }

    /**
     * Create a detached, initialised CommentRecord
     */
    public CommentRecord(ULong id, CommentType type, String relatedId, Long accountId, String name, String comment, CommentStatus status, String approvalUser, Byte isDeleted, Timestamp updatedTs, Timestamp createdTs) {
        super(Comment.COMMENT);

        set(0, id);
        set(1, type);
        set(2, relatedId);
        set(3, accountId);
        set(4, name);
        set(5, comment);
        set(6, status);
        set(7, approvalUser);
        set(8, isDeleted);
        set(9, updatedTs);
        set(10, createdTs);
    }
}
