/*
 * This file is generated by jOOQ.
 */
package com.scratch.database.mysql.jv.tables;


import com.scratch.database.mysql.jv.Indexes;
import com.scratch.database.mysql.jv.JvB2cDev;
import com.scratch.database.mysql.jv.Keys;
import com.scratch.database.mysql.jv.tables.records.ProductCategoryRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductCategory extends TableImpl<ProductCategoryRecord> {

    private static final long serialVersionUID = -907953731;

    /**
     * The reference instance of <code>jv_b2c_dev.product_category</code>
     */
    public static final ProductCategory PRODUCT_CATEGORY = new ProductCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductCategoryRecord> getRecordType() {
        return ProductCategoryRecord.class;
    }

    /**
     * The column <code>jv_b2c_dev.product_category.id</code>.
     */
    public final TableField<ProductCategoryRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>jv_b2c_dev.product_category.item_number</code>.
     */
    public final TableField<ProductCategoryRecord, String> ITEM_NUMBER = createField("item_number", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>jv_b2c_dev.product_category.category_id</code>.
     */
    public final TableField<ProductCategoryRecord, ULong> CATEGORY_ID = createField("category_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>jv_b2c_dev.product_category.updated_ts</code>.
     */
    public final TableField<ProductCategoryRecord, Timestamp> UPDATED_TS = createField("updated_ts", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>jv_b2c_dev.product_category.created_ts</code>.
     */
    public final TableField<ProductCategoryRecord, Timestamp> CREATED_TS = createField("created_ts", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>jv_b2c_dev.product_category</code> table reference
     */
    public ProductCategory() {
        this(DSL.name("product_category"), null);
    }

    /**
     * Create an aliased <code>jv_b2c_dev.product_category</code> table reference
     */
    public ProductCategory(String alias) {
        this(DSL.name(alias), PRODUCT_CATEGORY);
    }

    /**
     * Create an aliased <code>jv_b2c_dev.product_category</code> table reference
     */
    public ProductCategory(Name alias) {
        this(alias, PRODUCT_CATEGORY);
    }

    private ProductCategory(Name alias, Table<ProductCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProductCategory(Name alias, Table<ProductCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ProductCategory(Table<O> child, ForeignKey<O, ProductCategoryRecord> key) {
        super(child, key, PRODUCT_CATEGORY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JvB2cDev.JV_B2C_DEV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRODUCT_CATEGORY_CATEGORY_ID, Indexes.PRODUCT_CATEGORY_ITEM_NUMBER, Indexes.PRODUCT_CATEGORY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProductCategoryRecord, ULong> getIdentity() {
        return Keys.IDENTITY_PRODUCT_CATEGORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProductCategoryRecord> getPrimaryKey() {
        return Keys.KEY_PRODUCT_CATEGORY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProductCategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<ProductCategoryRecord>>asList(Keys.KEY_PRODUCT_CATEGORY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ProductCategoryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProductCategoryRecord, ?>>asList(Keys.PRODUCT_CATEGORY_IBFK_1, Keys.PRODUCT_CATEGORY_IBFK_2);
    }

    public Product product() {
        return new Product(this, Keys.PRODUCT_CATEGORY_IBFK_1);
    }

    public Category category() {
        return new Category(this, Keys.PRODUCT_CATEGORY_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductCategory as(String alias) {
        return new ProductCategory(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductCategory as(Name alias) {
        return new ProductCategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductCategory rename(String name) {
        return new ProductCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductCategory rename(Name name) {
        return new ProductCategory(name, null);
    }
}
