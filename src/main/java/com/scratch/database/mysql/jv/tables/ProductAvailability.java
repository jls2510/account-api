/*
 * This file is generated by jOOQ.
 */
package com.scratch.database.mysql.jv.tables;


import com.scratch.database.mysql.jv.Indexes;
import com.scratch.database.mysql.jv.JvB2cDev;
import com.scratch.database.mysql.jv.Keys;
import com.scratch.database.mysql.jv.tables.records.ProductAvailabilityRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductAvailability extends TableImpl<ProductAvailabilityRecord> {

    private static final long serialVersionUID = 222442707;

    /**
     * The reference instance of <code>jv_b2c_dev.product_availability</code>
     */
    public static final ProductAvailability PRODUCT_AVAILABILITY = new ProductAvailability();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductAvailabilityRecord> getRecordType() {
        return ProductAvailabilityRecord.class;
    }

    /**
     * The column <code>jv_b2c_dev.product_availability.id</code>.
     */
    public final TableField<ProductAvailabilityRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>jv_b2c_dev.product_availability.item_number</code>.
     */
    public final TableField<ProductAvailabilityRecord, String> ITEM_NUMBER = createField("item_number", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>jv_b2c_dev.product_availability.s2k_available</code>.
     */
    public final TableField<ProductAvailabilityRecord, Integer> S2K_AVAILABLE = createField("s2k_available", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>jv_b2c_dev.product_availability.available_quantity</code>.
     */
    public final TableField<ProductAvailabilityRecord, Integer> AVAILABLE_QUANTITY = createField("available_quantity", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>jv_b2c_dev.product_availability.pending_sold_quantity</code>.
     */
    public final TableField<ProductAvailabilityRecord, Integer> PENDING_SOLD_QUANTITY = createField("pending_sold_quantity", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>jv_b2c_dev.product_availability.confirmed_sold_quantity</code>.
     */
    public final TableField<ProductAvailabilityRecord, Integer> CONFIRMED_SOLD_QUANTITY = createField("confirmed_sold_quantity", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>jv_b2c_dev.product_availability</code> table reference
     */
    public ProductAvailability() {
        this(DSL.name("product_availability"), null);
    }

    /**
     * Create an aliased <code>jv_b2c_dev.product_availability</code> table reference
     */
    public ProductAvailability(String alias) {
        this(DSL.name(alias), PRODUCT_AVAILABILITY);
    }

    /**
     * Create an aliased <code>jv_b2c_dev.product_availability</code> table reference
     */
    public ProductAvailability(Name alias) {
        this(alias, PRODUCT_AVAILABILITY);
    }

    private ProductAvailability(Name alias, Table<ProductAvailabilityRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProductAvailability(Name alias, Table<ProductAvailabilityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ProductAvailability(Table<O> child, ForeignKey<O, ProductAvailabilityRecord> key) {
        super(child, key, PRODUCT_AVAILABILITY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JvB2cDev.JV_B2C_DEV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRODUCT_AVAILABILITY_PRIMARY, Indexes.PRODUCT_AVAILABILITY_PRODUCT_AVAILABILITY_ITEM_NUMBER_UINDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProductAvailabilityRecord, ULong> getIdentity() {
        return Keys.IDENTITY_PRODUCT_AVAILABILITY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProductAvailabilityRecord> getPrimaryKey() {
        return Keys.KEY_PRODUCT_AVAILABILITY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProductAvailabilityRecord>> getKeys() {
        return Arrays.<UniqueKey<ProductAvailabilityRecord>>asList(Keys.KEY_PRODUCT_AVAILABILITY_PRIMARY, Keys.KEY_PRODUCT_AVAILABILITY_PRODUCT_AVAILABILITY_ITEM_NUMBER_UINDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductAvailability as(String alias) {
        return new ProductAvailability(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductAvailability as(Name alias) {
        return new ProductAvailability(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductAvailability rename(String name) {
        return new ProductAvailability(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductAvailability rename(Name name) {
        return new ProductAvailability(name, null);
    }
}
